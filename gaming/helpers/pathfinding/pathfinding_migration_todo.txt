# Pathfinding System Migration Todo List
# From: 2371-line monolithic menu_pathfinding.py
# To: Modular architecture with backward compatibility
# Status: ~60% Complete (Core navigation working)

## âœ… COMPLETED MODULES

### Core Navigation (core/navigation.py)
- âœ… navigate_step() - Main navigation algorithm (lines 1201-1439)
- âœ… start_continuous_navigation() - Navigation job management (lines 1441-1468)
- âœ… stop_continuous_navigation() - Stop navigation (lines 1470-1476)
- âœ… navigate_continuously() - Main public interface (lines 1478-1480)
- âœ… navigate_to_word() - Word-based navigation (lines 1501-1526)
- âœ… All backward compatibility wrappers (lines 1483-1547)

### OCR & Template Matching (ocr/)
- âœ… get_text_coordinates() - OCR text finding (lines 638-788)
- âœ… find_cursor_flexible() - Game-specific cursor detection (lines 867-981)
- âœ… find_template_flexible() - Flexible template matching (lines 983-1039)
- âœ… get_homophones_for_word() - Homophone support (lines 153-168)
- âœ… normalize_text_for_fuzzy_matching() - Text normalization (lines 170-172)
- âœ… score_word_fuzzy() - Fuzzy text scoring (lines 174-211)

### Utilities (utils/)
- âœ… press_action_button_multiple() - Multiple button press (lines 376-381)
- âœ… calculate_distance() - Distance calculations (lines 1047-1051)
- âœ… check_cursor_intersects_victory_line() - Victory detection (lines 1053-1084)

### Settings (core/settings.py + cubes/cube_settings.py)
- âœ… All 15+ navigation settings migrated (lines 214-302)
- âœ… All 10+ cube settings migrated (lines 25-122)

## ðŸ”´ CRITICAL PRIORITY - CORE FUNCTIONALITY

### Pattern Detection Module (core/pattern_detection.py) - âœ… COMPLETE
**STATUS: âœ… IMPLEMENTED AND TESTED**
**ORIGINAL LINES: 1086-1198**
**PRIORITY: COMPLETED - Loop detection now functional**

- âœ… add_position_if_stable(current_pos: tuple) -> None
  - Track cursor positions over time
  - Only add to stable history if position held long enough
  - Round positions to handle template matching variations
  - Clean up old timing entries

- âœ… find_closest_stable_position_to_target(target_coords: tuple) -> tuple
  - Find stable position from history closest to target
  - Used for tiebreaker logic when navigation loops
  - Critical for resolving stuck navigation

- âœ… find_closest_position_to_target(position_history: list, target_coords: tuple) -> tuple
  - Fallback when no stable positions available
  - Simple distance-based closest position finder

- âœ… detect_repeating_pattern(position_history: list, tolerance: int = 25, required_repetitions: int = 2) -> tuple
  - Detect repeating navigation patterns (any length 2-N)
  - Look backwards through history for pattern matches
  - Return (is_pattern_detected: bool, detected_pattern: list)

- âœ… patterns_match(pattern1: list, pattern2: list, tolerance: int = 25) -> bool
  - Compare two position patterns within tolerance
  - Used by detect_repeating_pattern for matching

- âœ… get_stable_position_history() -> list
  - Debug function to inspect current stable positions

- âœ… clear_position_tracking() -> None
  - Reset all tracking data when starting new navigation

**INTEGRATION STATUS:**
- âœ… Integrated with core/navigation.py navigate_step()
- âœ… Tiebreaker logic implemented and functional
- âœ… Global variable management cleaned up
- âœ… Tested via Talon REPL - all functions working

### Grid Navigation System - NOT MIGRATED
**STATUS: Still in original file, needs migration**
**ORIGINAL LINES: 386-577**
**PRIORITY: HIGH - Advanced navigation feature**

- [ ] analyze_grid_structure() -> dict
  - OCR-based detection of column/row structure
  - Groups text items by X/Y coordinates
  - Returns grid info with columns array

- [ ] find_grid_position(target_text: str, grid_info: dict) -> tuple
  - Find column and row index of target text
  - Returns (col_idx, row_idx) or (None, None)

- [ ] find_current_position(highlight_image: str, grid_info: dict) -> tuple
  - Find current cursor position in grid coordinates
  - Uses highlight detection + closest text matching

- [ ] navigate_step_grid(target_text: str, highlight_image: str, use_wasd: bool, ...) -> bool
  - Grid-aware navigation: column first, then row
  - Fallback to unified navigation if grid detection fails
  - Integrates with existing navigation system

## ðŸŸ¡ HIGH PRIORITY - COMPLETE FEATURES

### Complete Cube System (cubes/) - âœ… COMPLETE
**STATUS: âœ… IMPLEMENTED AND TESTED**  
**ORIGINAL LINES: 1827-2371 (544 lines of complex code)**
**PRIORITY: COMPLETED - Major UI navigation feature now available**

- âœ… CubeDrawer class implementation
  - Canvas-based cube rendering with user settings
  - Color, transparency, text, font customization
  - Error handling for canvas operations

- âœ… show_cubes() -> None
  - Integrate with flex-mouse-grid for UI detection
  - Filter rectangles by size (character portraits, etc.)
  - Complex coordinate transformation between detection/canvas
  - Handle multi-monitor scenarios
  - Create canvas overlay with numbered cubes

- âœ… navigate_to_cube(number: int) -> None
  - Navigate to left edge of specified cube
  - Use configurable target offset
  - Integrate with continuous navigation system

- âœ… start_cube_navigation(number: int, target_x: float, target_y: float) -> None
  - Cube-specific continuous navigation startup
  - Reset navigation state
  - Start cron job for cube navigation steps

- âœ… cube_navigate_step(number: int, target_x: float, target_y: float) -> bool
  - Single cube navigation step
  - Same loop detection as regular navigation
  - Unified movement mode for cubes

- âœ… hide_cubes() -> None
  - Clean up canvas overlay
  - Reset cube state variables

- âœ… 15+ Cube Settings Management Functions (lines 2257-2371)
  - set_cube_background_color(), set_cube_stroke_color(), etc.
  - show_cube_settings(), reset_cube_settings()
  - save_cube_settings() (auto-save notification)

**INTEGRATION STATUS:**
- âœ… Integrated with pattern detection for loop prevention
- âœ… Uses shared navigation infrastructure  
- âœ… All cube settings functional and tested
- âœ… Canvas rendering system working
- âœ… Flex-mouse-grid integration complete

### Debug Tools Module (debug/) - âœ… COMPLETE
**STATUS: âœ… IMPLEMENTED AND TESTED**
**ORIGINAL LINES: 1564-1825**
**PRIORITY: COMPLETED - Essential debugging tools now available**

- âœ… debug_all_text_coordinates() -> None
  - List all OCR-detected text with coordinates
  - Disconnect/reconnect eye tracker properly
  - Format: 'Text' at (center_x, center_y) [left, top, width, height]

- âœ… debug_cursor_position() -> None
  - Show cursor position using template matching
  - Try both flexible and direct template matching
  - Compare results and show confidence levels

- âœ… debug_pathfinding_state() -> None
  - Combined view: cursor position + all text + distances
  - Show closest text items to cursor
  - Direction indicators (RIGHT/LEFT, UP/DOWN)
  - Test multiple cursor detection thresholds

- âœ… show_pathfinding_debug_markers(target_text: str = "Attack") -> None
  - Visual markers on screen for cursor and target
  - Use talon_ui_helper for marker display
  - 10x10 pixel markers at key positions

- âœ… hide_pathfinding_debug_markers() -> None
  - Clean up visual debug markers
  - Simple wrapper around marker_ui_hide()

- âœ… test_continuous_navigation() -> None
  - Safety-limited navigation testing with configurable parameters

- âœ… test_grid_analysis() -> None
  - Test grid structure detection and display results

- âœ… test_grid_navigation() -> None
  - Test grid navigation with safety limits

**TESTING STATUS:**
- âœ… All debug functions tested via Talon REPL
- âœ… Visual markers working correctly
- âœ… OCR integration functional
- âœ… Cursor detection comparison working

## ðŸŸ  MEDIUM PRIORITY - LEGACY FUNCTIONS

### Legacy Navigation Functions - NOT MIGRATED
**STATUS: Still in original file**
**ORIGINAL LINES: 579-866**
**PRIORITY: MEDIUM - May still be used by existing code**

- [ ] navigate_to_text_with_highlight(target_text: str, highlight_image: str, use_wasd: bool = False)
  - Original coordinate-based navigation
  - Single-step navigation without continuous loop
  - May be used by other parts of codebase

- [ ] navigate_to_text_with_highlight_wasd(target_text: str, highlight_image: str)
  - WASD variant of above function
  - Convenience wrapper

- [ ] navigate_to_text_with_highlight_arrows(target_text: str, highlight_image: str)
  - Arrow key variant
  - Convenience wrapper

### Test Functions - NOT MIGRATED
**STATUS: Still in original file**
**ORIGINAL LINES: 1542-1563**
**PRIORITY: MEDIUM - Development/testing tools**

- [ ] test_continuous_navigation(target_text: str, highlight_image: str, max_steps: int = 3, ...)
  - Safety-limited navigation testing
  - Configurable countdown and step limits

- [ ] test_grid_analysis() -> None
  - Test grid structure detection
  - Print detected columns and analysis

- [ ] test_grid_navigation(target_text: str, highlight_image: str = None, max_steps: int = 5)
  - Test grid navigation with safety limits
  - Grid-specific testing function

## ðŸ“‹ TESTING REQUIREMENTS

### Critical Tests Needed After Migration:
1. **Pattern Detection Integration**
   - [ ] Test loop detection with navigate_step()
   - [ ] Verify tiebreaker logic activates correctly
   - [ ] Test stable position tracking accuracy

2. **Grid Navigation Testing**
   - [ ] Test grid structure analysis across different games
   - [ ] Verify column-first navigation logic
   - [ ] Test fallback to unified navigation

3. **Cube System Integration**
   - [ ] Test UI detection accuracy (character portraits vs other elements)
   - [ ] Verify canvas coordinate transformation
   - [ ] Test cube navigation with different games
   - [ ] Verify all cube settings work properly

4. **Debug Tools Validation**
   - [ ] Test OCR coordinate accuracy against actual navigation
   - [ ] Verify cursor detection matches navigation system
   - [ ] Test visual markers align with actual positions

5. **Backward Compatibility**
   - [ ] All existing voice commands continue working
   - [ ] No performance degradation
   - [ ] Settings migration works correctly

## ðŸ”§ IMPLEMENTATION NOTES

### Global Variables to Handle:
- cursor_position_history (used by pattern detection)
- stable_position_history (used by pattern detection)
- position_timing (used by pattern detection)
- navigation_steps_taken (used by all navigation)
- last_direction_pressed (used by all navigation)
- cube_rectangles (used by cube system)
- cube_canvas (used by cube system)
- cube_showing (used by cube system)
- last_successful_cursor_file (optimization)

### Import Dependencies to Verify:
- Ensure all cross-module function calls work correctly
- Verify Talon action registration from modular files
- Check that homophones integration works from OCR module

### Performance Considerations:
- OCR scanning frequency (disconnect/reconnect eye tracker)
- Template matching optimization (last_successful_cursor_file)
- Canvas rendering performance for cube overlays
- Pattern detection algorithm efficiency

## ðŸ“Š COMPLETION ESTIMATES

- **Current Status**: ~90% complete
- **Pattern Detection**: ~50 lines of complex logic
- **Grid Navigation**: ~190 lines of OCR integration
- **Cube System**: ~544 lines of UI detection + canvas rendering
- **Debug Tools**: ~260 lines of analysis functions
- **Legacy/Test Functions**: ~285 lines of compatibility code

**TOTAL REMAINING**: ~285 lines to migrate and test (Legacy Functions only)

## ðŸŽ¯ SUCCESS CRITERIA

- [ ] All 67+ original functions migrated and working
- [ ] All 25+ settings functional from new modules  
- [ ] No performance degradation from modularization
- [ ] 100% backward compatibility maintained
- [ ] All voice commands working as before
- [ ] Comprehensive test coverage of all features
- [ ] Original menu_pathfinding.py can be safely archived

---

**Last Updated**: [Current Date]
**Next Session Priority**: Complete Pattern Detection Module (CRITICAL)